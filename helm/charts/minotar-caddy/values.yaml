
gitSync:
  enabled: false
  repo:

restartPolicy: Always

## Additional imgd container environment variables
## For instance to add a http_proxy
##
## extraEnv:
##   HTTP_PROXY: "http://superproxy.com:3128"
##   NO_PROXY: "localhost,127.0.0.1"
extraEnv: {}

## Enable pod security policy
pspEnabled: false

strategy:
  rollingUpdate:
    maxSurge: 2
    maxUnavailable: 1
  type: RollingUpdate


image:
  repository: caddy
  tag: 2.4.3-alpine
  #pullPolicy: IfNotPresent
  pullPolicy: Always


## User to run caddy container as
runAsUser: 10001
readOnlyRootFilesystem: true
runAsNonRoot: true


livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 5
  periodSeconds: 15

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 15


resources:
#  limits:
#    cpu: 200m
#    memory: 50Mi
  requests:
    cpu: 50m
    memory: 20Mi


service:
  annotations: {}
  labels: {}
  type: ClusterIP
  port: 80

containerPort: 8080

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  annotations: {}


podAnnotations: {}

pod:
  labels: {}

replicas: 3

serviceMonitor:
  ## If true, a ServiceMonitor CRD is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator
  ##
  enabled: false

  selector:
    release: prometheus
  additionalMetricsRelabels: {}
  interval: 30s
  scrapeTimeout: 30s
  ## scheme: HTTP scheme to use for scraping. Can be used with `tlsConfig` for example if using istio mTLS.
  scheme: http
  ## tlsConfig: TLS configuration to use when scraping the endpoint. For example if using istio mTLS.
  ## Of type: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#tlsconfig
  tlsConfig: {}
  bearerTokenFile:

## Custom PrometheusRules to be defined
## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
prometheusRule:
  enabled: false
  additionalLabels: {}
  namespace: ""
  rules: []

## Network policy for chart
networkPolicy:
  # Enable network policy and allow access from anywhere
  enabled: false
  # Limit access only from monitoring namespace
  # Before setting this value to true, you must add the name=monitoring label to the monitoring namespace
  # Network Policy uses label filtering
  allowMonitoringNamespace: false

caddyConfig: |
  :8080 {
    # root /srv/www
    respond "Hello, world!"
  }
