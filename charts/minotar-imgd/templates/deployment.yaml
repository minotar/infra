apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "minotar-imgd.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "minotar-imgd.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "minotar-imgd.chart" . }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "minotar-imgd.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "minotar-imgd.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        helm.sh/chart: {{ include "minotar-imgd.chart" . }}
        {{- if .Values.pod.labels }}
{{ toYaml .Values.pod.labels | indent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "minotar-imgd.serviceAccountName" . }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
    {{- end }}
    {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 6 }}
    {{- end }}

      restartPolicy: {{ .Values.restartPolicy }}

      {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{- end }}
      containers:
        {{- if .Values.extraContainers }}
{{ toYaml .Values.extraContainers | indent 8 }}
        {{- end }}
        - name: imgd
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            readOnlyRootFilesystem: {{ .Values.readOnlyRootFilesystem }}
            runAsNonRoot: {{ .Values.runAsNonRoot  }}
            runAsUser: {{ .Values.runAsUser }}
          env:
          {{- range $key, $value := .Values.extraEnv }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          ports:
            - containerPort: {{ .Values.containerPort }}
              name: http
            - containerPort: {{ .Values.containerDebugPort }}
              name: http-debug
          livenessProbe:
            {{- toYaml .Values.livenessProbe | trim | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | trim | nindent 12 }}
          volumeMounts:
            - mountPath: /config.gcfg
              name: config
              subPath: config.gcfg
          {{- range .Values.extraSecretMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
{{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy | toString }}
{{- end }}
{{- if .Values.dnsConfig }}
      dnsConfig:
        {{- toYaml .Values.dnsConfig | nindent 8 }}
{{- end }}
      volumes:
        - name: config
{{- if .Values.secretConfig }}
          secret:
            secretName: {{ template "minotar-imgd.fullname" . }}
{{- else if .Values.configExistingSecretName }}
          secret:
            secretName: {{ .Values.configExistingSecretName }}
{{- else }}
          configMap:
            name: {{ template "minotar-imgd.fullname" . }}
{{- end }}
      {{- range .Values.extraSecretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
            defaultMode: {{ .defaultMode }}
      {{- end }}
